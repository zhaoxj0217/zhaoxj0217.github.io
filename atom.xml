<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaoxj0217_blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoxj0217.github.io/"/>
  <updated>2017-11-02T10:27:00.343Z</updated>
  <id>http://zhaoxj0217.github.io/</id>
  
  <author>
    <name>zhaoxj0217</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于tensorflow的‘端到端’的字符型验证码识别—cnn</title>
    <link href="http://zhaoxj0217.github.io/2017/11/02/captcha_by_cnn/"/>
    <id>http://zhaoxj0217.github.io/2017/11/02/captcha_by_cnn/</id>
    <published>2017-11-02T06:19:58.465Z</published>
    <updated>2017-11-02T10:27:00.343Z</updated>
    
    <content type="html"><![CDATA[<p>因有个验证码识别的需求，本来打算用SVM来识别验证码，但在查询资料的过程中看到了@斗大的熊猫<br><a href="http://blog.topspeedsnail.com/archives/10858" target="_blank" rel="external">TensorFlow练习20: 使用深度学习破解字符验证码</a><br>这篇文章<br>在github上也找到了基于这篇文章的代码整合<br><a href="https://github.com/zhengwh/captcha-tensorflow" target="_blank" rel="external">基于tensorflow的‘端到端’的字符型验证码识别</a></p>
<p>因为传统的机器学习方法，对于多位字符验证码都是采用的化整为零的方法：先分割成最小单位，再分别识别，然后再统一。同时还需对图片进行去躁，去干扰线等预处理，预处理的好坏直接影响识别率，所以想看下<br>卷积神经网络方法，是否真的更加通用简单，其他相关的说明都在这2个连接中</p>
<p>本文的代码是在win7,python35环境下跑的<br>针对captcha-tensorflow的代码做了一些修改（主要是数据读取的方式的修改，原来的代码是直接代码生成验证码图片进行训练，本文需要训练的验证码是通过其他方式批量生成后再进行训练）</p>
<p>修改后的代码目录与原来代码目录基本一致（去掉了没使用的验证码生成）</p>
<pre><code>capt
    __init__.py
    cfg.py  配置信息文件
    cnn_sys.py  CNN网络结构
    data_iter.py 可迭代的数据集
    predict.py 加载训练好的模型，然后对输入的图片进行预测
    train.py 对模型进行训练
    utils.py 一些公共使用的方法
tmp
work
</code></pre><p>cfg.py就根据实际情况配置下<br>cnn_sys.py 需要根据你视图验证码的图像大小，做下计算参数上的小调整<br>predict.py 根据需要修改获取验证数据方式<br>train.py  有个须知的地方：</p>
<pre><code># 从0开始训练数据
# sess.run(tf.global_variables_initializer())

#在训练一段时间后接着上次的训练
saver.restore(sess, tf.train.latest_checkpoint(model_path))
</code></pre><p>data_iter.py 提供数据与原来的方法有所区别:  </p>
<pre><code>&quot;&quot;&quot;
数据生成器
&quot;&quot;&quot;
import numpy as np

from capt.cfg import IMAGE_HEIGHT, IMAGE_WIDTH, CHAR_SET_LEN, MAX_CAPTCHA,trainSpace,testSpace,verifySpace
from capt.utils import convert2gray, text2vec
from tensorflow.python.platform import gfile
import os.path
from PIL import Image
import random
from os.path import join

no1 = 0
no2 = 1
dataSet = []
testdataSet = []
verifydataSet =[]

#从相应文件夹内读取验证码图片
def create_data_list(image_dir):
    if not gfile.Exists(image_dir):
        print(&quot;Image director &apos;&quot; + image_dir + &quot;&apos; not found.&quot;)
        return None

      extensions = [&apos;jpg&apos;]
      print(&quot;Looking for images in &apos;&quot; + image_dir + &quot;&apos;&quot;)
      file_list = []
      for extension in extensions:
        file_glob = os.path.join(image_dir, &apos;*.&apos; + extension)
        file_list.extend(gfile.Glob(file_glob))
      if not file_list:
        print(&quot;No files found in &apos;&quot; + image_dir + &quot;&apos;&quot;)
        return None

      imageList = []
      for file_name in file_list:
        images = []
        image = Image.open(file_name)
        img_raw =  np.array(image)
        image.close()
        label_name = os.path.basename(file_name).split(&apos;_&apos;)[0]
        images.append(img_raw)
        images.append(label_name)
        imageList.append(images)
      print(&quot;create imgList finish!&quot;)
      return imageList


#生成训练数据
def get_train_batch(batch_size=128):
       #因为待训练的图片很多（几十万张）一次读取很占内存，将他们分成1万一个子文件夹
    batch_x = np.zeros([batch_size, IMAGE_HEIGHT * IMAGE_WIDTH])
    batch_y = np.zeros([batch_size, MAX_CAPTCHA * CHAR_SET_LEN])

    global no1
    no1= no1+1
    print(&apos;no1&apos;,no1)
    global no2
    global dataSet
    image_dir = join(trainSpace, no2)
    if(no1&gt;n):#单个子集训练n个step
           no1=0
        no2 =no2+1
        if (no2 &gt; j):#全部子集训练完后循环训练
               no2 = 1
        image_dir = join(trainSpace, no2)
        dataSet = create_data_list(image_dir)
        print(&quot;create trainSET&quot;)
        print(&apos;image_dir&apos;, image_dir)
    print(&apos;no2&apos;, no2)
    if(not dataSet):
        dataSet = create_data_list(image_dir)
        print(&quot;create trainSET&quot;)
        print(&apos;image_dir&apos;, image_dir)

    for i in range(batch_size):
        data = dataSet[random.randint(0, len(dataSet)-1)]#随机读取数据
        image = data[0]
        text = data[1]
        image = convert2gray(image)
        batch_x[i, :] = image.flatten() / 255  # (image.flatten()-128)/128  mean为0
        batch_y[i, :] = text2vec(text)

    return batch_x, batch_y

#获取测试数据
def get_test_batch(batch_size=128):

    batch_x = np.zeros([batch_size, IMAGE_HEIGHT * IMAGE_WIDTH])
    batch_y = np.zeros([batch_size, MAX_CAPTCHA * CHAR_SET_LEN])

    global testdataSet
    if(not testdataSet):
           image_dir = testSpace
        testdataSet = create_data_list(image_dir)
        print(&quot;create testSET&quot;)

    for i in range(batch_size):
        data = testdataSet[random.randint(0, len(testdataSet)-1)]
        image = data[0]
        text = data[1]
        image = convert2gray(image)
        batch_x[i, :] = image.flatten() / 255  # (image.flatten()-128)/128  mean为0
        batch_y[i, :] = text2vec(text)

    return batch_x, batch_y

#获取验证数据
def get_verify():
    global verifydataSet
    if(not verifydataSet):
        image_dir = &quot;D:\\tmp\\cnnImage\\verify4&quot;
        verifydataSet = create_data_list(image_dir)
        print(&quot;create verifySET&quot;)

    data = verifydataSet[random.randint(0, len(verifydataSet)-1)]
    image = data[0]
    text = data[1]
    return  text,image
</code></pre><p>在监控文件所在盘 执行tensorboard –logdir=…<br>(这个cmd 命令与在百度上查询到的在linux上执行的不一样，需要注意)<br>就可以在tensorboard上查看监控图像，</p>
<p>本次训练在经过2万个step 以后ACC达到95%，识别准确率在85%<br><img src="http://chuantu.biz/t6/122/1509618243x3663627938.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因有个验证码识别的需求，本来打算用SVM来识别验证码，但在查询资料的过程中看到了@斗大的熊猫&lt;br&gt;&lt;a href=&quot;http://blog.topspeedsnail.com/archives/10858&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;T
    
    </summary>
    
      <category term="python,CNN,tensorflow," scheme="http://zhaoxj0217.github.io/categories/python-CNN-tensorflow/"/>
    
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
      <category term="CNN" scheme="http://zhaoxj0217.github.io/tags/CNN/"/>
    
      <category term="深度学习" scheme="http://zhaoxj0217.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://zhaoxj0217.github.io/tags/tensorflow/"/>
    
      <category term="captcha" scheme="http://zhaoxj0217.github.io/tags/captcha/"/>
    
  </entry>
  
  <entry>
    <title>scikit_learn preprocessing</title>
    <link href="http://zhaoxj0217.github.io/2017/10/26/scikit_learn_preprocessing/"/>
    <id>http://zhaoxj0217.github.io/2017/10/26/scikit_learn_preprocessing/</id>
    <published>2017-10-26T07:54:57.875Z</published>
    <updated>2017-10-26T08:07:12.438Z</updated>
    
    <content type="html"><![CDATA[<p>特征数据预处理<br>参考自（<a href="http://blog.csdn.net/sinat_33761963/article/details/53433799" target="_blank" rel="external">预处理数据的方法总结（使用sklearn-preprocessing）</a> ）</p>
<ol>
<li>标准化：去均值，方差规模化</li>
</ol>
<p>Standardization标准化:将特征数据的分布调整成标准正太分布，也叫高斯分布，也就是使得数据的均值维0，方差为1.</p>
<p>标准化的原因在于如果有些特征的方差过大，则会主导目标函数从而使参数估计器无法正确地去学习其他特征。</p>
<p>标准化的过程为两步：去均值的中心化（均值变为0）；方差的规模化（方差变为1）。</p>
<p>在sklearn.preprocessing中提供了一个scale的方法，可以实现以上功能。</p>
<pre><code>from sklearn import preprocessing
import numpy as np
x = np.array([[1., -1., 2.],
  [2., 0., 0.],
  [0., 1., -1.]])
x_scale = preprocessing.scale(x)
&gt;&gt;&gt;x_scale
&gt;&gt;&gt;array([[ 0.        , -1.22474487,  1.33630621],
   [ 1.22474487,  0.        , -0.26726124],
   [-1.22474487,  1.22474487, -1.06904497]])
&gt;&gt;&gt;x_scale.mean(axis=0)
&gt;&gt;&gt;array([ 0.,  0.,  0.])
&gt;&gt;&gt;x_scale.std(axis=0)
&gt;&gt;&gt;array([ 1.,  1.,  1.])
</code></pre><p>用数学公式计算的话   </p>
<pre><code>#calculate mean
x_mean = x.mean(axis=0)
# calculate variance 
x_std = x.std(axis=0)
# standardize X
x1 = (x-x_mean)/x_std
</code></pre><p>x1的计算结果与上述使用preprocessing.scale 计算的结果一样</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;特征数据预处理&lt;br&gt;参考自（&lt;a href=&quot;http://blog.csdn.net/sinat_33761963/article/details/53433799&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;预处理数据的方法总结（使用sklearn
    
    </summary>
    
      <category term="Machine Learning,python" scheme="http://zhaoxj0217.github.io/categories/Machine-Learning-python/"/>
    
    
      <category term="Machine Learning" scheme="http://zhaoxj0217.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
      <category term="scikit_learn" scheme="http://zhaoxj0217.github.io/tags/scikit-learn/"/>
    
  </entry>
  
  <entry>
    <title>linear algebra知识点—math</title>
    <link href="http://zhaoxj0217.github.io/2017/10/26/linear_algebra/"/>
    <id>http://zhaoxj0217.github.io/2017/10/26/linear_algebra/</id>
    <published>2017-10-26T01:39:54.128Z</published>
    <updated>2017-10-26T01:39:54.183Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="linear algebra" scheme="http://zhaoxj0217.github.io/categories/linear-algebra/"/>
    
    
      <category term="linear algebra" scheme="http://zhaoxj0217.github.io/tags/linear-algebra/"/>
    
  </entry>
  
  <entry>
    <title>NumPy—Python</title>
    <link href="http://zhaoxj0217.github.io/2017/10/25/python_numpy/"/>
    <id>http://zhaoxj0217.github.io/2017/10/25/python_numpy/</id>
    <published>2017-10-25T08:35:03.611Z</published>
    <updated>2017-10-25T08:35:03.672Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
      <category term="NumPy" scheme="http://zhaoxj0217.github.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>python正则表达式—Python</title>
    <link href="http://zhaoxj0217.github.io/2017/10/25/python_regular/"/>
    <id>http://zhaoxj0217.github.io/2017/10/25/python_regular/</id>
    <published>2017-10-25T08:17:49.915Z</published>
    <updated>2017-10-25T08:17:49.967Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
      <category term="正则表达式" scheme="http://zhaoxj0217.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python基础—Python</title>
    <link href="http://zhaoxj0217.github.io/2017/10/25/python_basics/"/>
    <id>http://zhaoxj0217.github.io/2017/10/25/python_basics/</id>
    <published>2017-10-25T08:14:56.527Z</published>
    <updated>2017-10-26T07:15:26.158Z</updated>
    
    <content type="html"><![CDATA[<p>python 30分钟入门教程：<a href="https://learnxinyminutes.com/docs/python/" target="_blank" rel="external">Learn X in Y minutes</a></p>
<p>一、python解释器<br>CPython：官方版本解释器，使用最广<br>IPython：基于CPython之上的一个交互式解释器<br>PyPy：目标是执行速度，对Python代码进行动态编译（注意不是解释）<br>Jython：运行在Java平台上的Python解释器<br>IronPython：运行在微软.Net平台上的Python解释器  </p>
<p>二、输入输出<br>raw_input和print是在命令行下面最基本的输入和输出</p>
<p>三、数据类型和变量<br>1.整数：<br>2.浮点数：<br>3.字符串：转义字符\ &amp; Python还允许用r’’表示’’内部的字符串默认不转义 &amp; Python允许用’’’…’’’的格式表示多行内容<br>4.布尔值：True、False（请注意大小写）<br>5.空值：None<br>6.变量：a = ‘ABC’时，Python解释器干了两件事情：<br>　　在内存中创建了一个’ABC’的字符串；<br>　　在内存中创建了一个名为a的变量，并把它指向’ABC’<br>7.list:[]有序集合，用-1做索引，直接获取最后一个元素<br>　　len(list):取长度<br>　　list.append(a)追加<br>　　list.insert(1，a)元素插入<br>　　list.pop()删除list末尾的元素<br>　　list.pop(i)删除置顶位置的元素<br>　　li =  [1, 2, 4, 3]<br>　　(It’s a closed/open range for you mathy types.)<br>　　li[1:3]  # =&gt; [2, 4]<br> 　　Omit the beginning<br>　　li[2:]  # =&gt; [4, 3]<br>　　 Omit the end<br>　　li[:3]  # =&gt; [1, 2, 4]<br> 　　Select every second entry<br>　　li[::2]  # =&gt;[1, 4]<br> 　　Reverse a copy of the list<br>　　li[::-1]  # =&gt; [3, 4, 2, 1]  </p>
<p>8.tuple:()有序列表，一旦初始化后不能修改  Python在显示只有1个元素的tuple时，也会加一个逗号,，以免你误解成数学计算意义上的括号(1,)<br>9.dict:dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度<br>　　dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：d.get(‘Thomas’, -1)<br>　　d.pop(key):删除key<br>10.set：在set中，没有重复的key<br>　　s.add(key)<br>　　s.remove(key)  </p>
<p>四、函数<br>　　绝对值函数：abs(x)<br>　　帮助命令：help(abs)<br>　　比较函数：cmp(x,y)<br>　　转换:int()、float()、str()、unicode()、bool()<br>　　类型检查：isinstance（）</p>
<p>五、函数的参数<br>　　要注意定义可变参数和关键字参数的语法：<br>　　<em>args是可变参数，args接收的是一个tuple；<br>　　*</em>kw是关键字参数，kw接收的是一个dict。<br>　　参数组合：参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。</p>
<p>六、递归函数<br>　　使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。<br>　　解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的<br>　　尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p>
<p>七、其他<br>    　　__future__：Python提供了__future__模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 30分钟入门教程：&lt;a href=&quot;https://learnxinyminutes.com/docs/python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn X in Y minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一、pyth
    
    </summary>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda使用—Python</title>
    <link href="http://zhaoxj0217.github.io/2017/10/25/Anaconda_python/"/>
    <id>http://zhaoxj0217.github.io/2017/10/25/Anaconda_python/</id>
    <published>2017-10-25T08:12:38.273Z</published>
    <updated>2017-10-25T08:12:55.815Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Machine Learning,python" scheme="http://zhaoxj0217.github.io/categories/Machine-Learning-python/"/>
    
    
      <category term="Machine Learning" scheme="http://zhaoxj0217.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据科学的完整学习路径—Python版</title>
    <link href="http://zhaoxj0217.github.io/2017/10/25/python_learning_for_ml/"/>
    <id>http://zhaoxj0217.github.io/2017/10/25/python_learning_for_ml/</id>
    <published>2017-10-25T07:29:33.343Z</published>
    <updated>2017-10-25T08:31:21.336Z</updated>
    
    <content type="html"><![CDATA[<p>待消化的内容</p>
<p>转自(<a href="http://dataunion.org/9805.html?utm_source=tuicool" target="_blank" rel="external">数据科学的完整学习路径—Python版</a>)</p>
<p>从Python菜鸟到Python Kaggler的旅程（译注：Kaggle是一个数据建模和数据分析竞赛平台）</p>
<p>假如你想成为一个数据科学家，或者已经是数据科学家的你想扩展你的技能，那么你已经来对地方了。本文的目的就是给数据分析方面的Python新手提供一个完整的学习路径。该路径提供了你需要学习的利用Python进行数据分析的所有步骤的完整概述。如果你已经有一些相关的背景知识，或者你不需要路径中的所有内容，你可以随意调整你自己的学习路径，并且让大家知道你是如何调整的。</p>
<p>步骤0：热身</p>
<p>开始学习旅程之前，先回答第一个问题：为什么使用Python？或者，Python如何发挥作用？<br>观看DataRobot创始人Jeremy在PyCon Ukraine 2014上的30分钟演讲，来了解Python是多么的有用。</p>
<p>步骤1：设置你的机器环境</p>
<p>现在你已经决心要好好学习了，也是时候设置你的机器环境了。最简单的方法就是从Continuum.io上下载分发包Anaconda。Anaconda将你以后可能会用到的大部分的东西进行了打包。采用这个方法的主要缺点是，即使可能已经有了可用的底层库的更新，你仍然需要等待Continuum去更新Anaconda包。当然如果你是一个初学者，这应该没什么问题。</p>
<p>如果你在安装过程中遇到任何问题，你可以在这里找到不同操作系统下更详细的安装说明。</p>
<p>步骤2：学习Python语言的基础知识</p>
<p>你应该先去了解Python语言的基础知识、库和数据结构。Codecademy上的Python课程是你最好的选择之一。完成这个课程后，你就能轻松的利用Python写一些小脚本，同时也能理解Python中的类和对象。</p>
<p>具体学习内容：列表Lists，元组Tuples，字典Dictionaries，列表推导式，字典推导式。<br>任务：解决HackerRank上的一些Python教程题，这些题能让你更好的用Python脚本的方式去思考问题。<br>替代资源：如果你不喜欢交互编码这种学习方式，你也可以学习谷歌的Python课程。这个2天的课程系列不但包含前边提到的Python知识，还包含了一些后边将要讨论的东西。</p>
<p>步骤3：学习Python语言中的正则表达式</p>
<p>你会经常用到正则表达式来进行数据清理，尤其是当你处理文本数据的时候。学习正则表达式的最好方法是参加谷歌的Python课程，它会让你能更容易的使用正则表达式。</p>
<p>任务：做关于小孩名字的正则表达式练习。</p>
<p>如果你还需要更多的练习，你可以参与这个文本清理的教程。数据预处理中涉及到的各个处理步骤对你来说都会是不小的挑战。</p>
<p>步骤4：学习Python中的科学库—NumPy, SciPy, Matplotlib以及Pandas</p>
<p>从这步开始，学习旅程将要变得有趣了。下边是对各个库的简介，你可以进行一些常用的操作：</p>
<p>•根据<a href="http://scipy.github.io/old-wiki/pages/Tentative_NumPy_Tutorial" target="_blank" rel="external">NumPy教程</a>进行完整的练习，特别要练习数组arrays。这将会为下边的学习旅程打好基础。<br>•接下来学习<a href="https://docs.scipy.org/doc/scipy/reference/tutorial/" target="_blank" rel="external">Scipy教程</a>。看完Scipy介绍和基础知识后，你可以根据自己的需要学习剩余的内容。<br>•这里并不需要学习Matplotlib教程。对于我们这里的需求来说，Matplotlib的内容过于广泛。取而代之的是你可以学习<a href="http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb" target="_blank" rel="external">这个笔记</a>中前68行的内容。<br>•最后学习Pandas。Pandas为Python提供DataFrame功能（类似于R）。这也是你应该花更多的时间练习的地方。Pandas会成为所有中等规模数据分析的最有效的工具。作为开始，你可以先看一个关于Pandas的<a href="http://pandas.pydata.org/pandas-docs/stable/10min.html" target="_blank" rel="external">10分钟简短介绍</a>，然后学习一个更详细的<a href="http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/" target="_blank" rel="external">Pandas教程</a>。<br>您还可以学习两篇博客<a href="http://www.analyticsvidhya.com/blog/2014/08/baby-steps-python-performing-exploratory-analysis-python/" target="_blank" rel="external">Exploratory Data Analysis with Pandas</a>和<a href="https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/" target="_blank" rel="external">Data munging with Pandas</a>中的内容。</p>
<p>额外资源：<br>•如果你需要一本关于Pandas和Numpy的书，建议Wes McKinney写的“Python for Data Analysis”。<br>•在Pandas的文档中，也有很多Pandas教程，你可以在这里查看。</p>
<p>任务：尝试解决哈佛CS109课程的<a href="http://nbviewer.jupyter.org/github/cs109/2014/blob/master/homework/HW1.ipynb" target="_blank" rel="external">这个任务</a>。</p>
<p>步骤5：有用的数据可视化</p>
<p>参加CS109的<a href="http://cm.dce.harvard.edu/2015/01/14328/L03/screen_H264LargeTalkingHead-16x9.shtml" target="_blank" rel="external">这个课程</a>。你可以跳过前边的2分钟，但之后的内容都是干货。你可以根据<a href="http://nbviewer.jupyter.org/github/cs109/2014/blob/master/homework/HW2.ipynb" target="_blank" rel="external">这个任务</a>来完成课程的学习。</p>
<p>步骤6：学习Scikit-learn库和机器学习的内容</p>
<p>现在，我们要开始学习整个过程的实质部分了。Scikit-learn是机器学习领域最有用的Python库。这里是该库的简要概述。完成哈佛CS109课程的课程10到课程18，这些课程包含了机器学习的概述，同时介绍了像回归、决策树、整体模型等监督算法以及聚类等非监督算法。你可以根据各个课程的任务来完成相应的课程。</p>
<p>额外资源：</p>
<p>•如果说有那么一本书是你必读的，推荐Programming Collective Intelligence(集体智慧编程)。这本书虽然有点老，但依然是该领域最好的书之一。<br>•此外，你还可以参加来自Yaser Abu-Mostafa的机器学习课程，这是最好的机器学习课程之一。如果你需要更易懂的机器学习技术的解释，你可以选择来自Andrew Ng的机器学习课程，并且利用Python做相关的课程练习。<br>•Scikit-learn的教程</p>
<p>任务：尝试Kaggle上的这个<a href="https://www.kaggle.com/c/data-science-london-scikit-learn" target="_blank" rel="external">挑战</a></p>
<p>步骤7：练习，练习，再练习</p>
<p>恭喜你，你已经完成了整个学习旅程。</p>
<p>你现在已经学会了你需要的所有技能。现在就是如何练习的问题了，还有比通过在Kaggle上和数据科学家们进行竞赛来练习更好的方式吗？深入一个当前Kaggle上正在进行的比赛，尝试使用你已经学过的所有知识来完成这个比赛。</p>
<p>步骤8：深度学习</p>
<p>现在你已经学习了大部分的机器学习技术，是时候关注一下深度学习了。很可能你已经知道什么是深度学习，但是如果你仍然需要一个简短的介绍，可以看<a href="http://dataunion.org/9805.html?utm_source=tuicool" target="_blank" rel="external">这里</a>。</p>
<p>我自己也是深度学习的新手，所以请有选择性的采纳下边的一些建议。deeplearning.net上有深度学习方面最全面的资源，在这里你会发现所有你想要的东西—讲座、数据集、挑战、教程等。你也可以尝试参加Geoff Hinton的课程，来了解神经网络的基本知识。</p>
<p>附言：如果你需要大数据方面的库，可以试试Pydoop和PyMongo。大数据学习路线不是本文的范畴，是因为它自身就是一个完整的主题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待消化的内容&lt;/p&gt;
&lt;p&gt;转自(&lt;a href=&quot;http://dataunion.org/9805.html?utm_source=tuicool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据科学的完整学习路径—Python版&lt;/a&gt;)&lt;/p&gt;

    
    </summary>
    
      <category term="Machine Learning,python" scheme="http://zhaoxj0217.github.io/categories/Machine-Learning-python/"/>
    
    
      <category term="Machine Learning" scheme="http://zhaoxj0217.github.io/tags/Machine-Learning/"/>
    
      <category term="python" scheme="http://zhaoxj0217.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习参考地址</title>
    <link href="http://zhaoxj0217.github.io/2017/10/24/Machine_Learning_Url/"/>
    <id>http://zhaoxj0217.github.io/2017/10/24/Machine_Learning_Url/</id>
    <published>2017-10-24T08:59:11.698Z</published>
    <updated>2017-10-26T02:31:00.105Z</updated>
    
    <content type="html"><![CDATA[<p>待消化的内容</p>
<p><a href="http://www.cnblogs.com/steven-yang/p/6348112.html" title="机器学习中的基本数学知识 - SNYang - 博客园" target="_blank" rel="external">机器学习中的基本数学知识 - SNYang - 博客园</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25197792" title="机器学习理论篇1：机器学习的数学基础 - 知乎专栏" target="_blank" rel="external">机器学习理论篇1：机器学习的数学基础 - 知乎专栏</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/24799837" target="_blank" rel="external">数据科学入门篇1：数据科学完整学习路径 - 知乎专栏</a></p>
<p><a href="http://www.jianshu.com/p/ed9ae5385b89" target="_blank" rel="external">浅谈机器学习基础（上）</a></p>
<p><a href="http://www.jianshu.com/p/0359e3b7bb1b" target="_blank" rel="external">浅谈机器学习基础（下）</a></p>
<p><a href="https://yq.aliyun.com/articles/204352?utm_content=m_30548" target="_blank" rel="external">机器学习的入门“秘籍” </a></p>
<p><a href="http://python.jobbole.com/84326/" title="利用Python，四步掌握机器学习 - Python - 伯乐在线" target="_blank" rel="external">利用Python，四步掌握机器学习 - Python - 伯乐在线</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" title="Python 2.7教程 - 廖雪峰的官方网站" target="_blank" rel="external">Python 2.7教程 - 廖雪峰的官方网站</a></p>
<p><a href="http://blog.csdn.net/dinosoft/article/details/34960693" title="cs229 斯坦福机器学习笔记（一）-- 入门与LR模型 - CSDN博客" target="_blank" rel="external">cs229 斯坦福机器学习笔记（一）– 入门与LR模型 - CSDN博客</a></p>
<p><a href="https://www.coursera.org/learn/machine-learning?authMode=signup" title="机器学习 | Coursera" target="_blank" rel="external">机器学习 | Coursera</a></p>
<p><a href="https://www.kaggle.com/" target="_blank" rel="external">kaggle</a></p>
<p><a href="http://www.cnblogs.com/ello/archive/2012/04/28/2475419.html" title="浅析人脸检测之Haar分类器方法 - ello - 博客园" target="_blank" rel="external">浅析人脸检测之Haar分类器方法 - ello - 博客园</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;mid=2650724242&amp;idx=1&amp;sn=703d242700e29813d6c482daf6b211c5&amp;chksm=871b13ecb06c9afa28f8aad729496620078985e4eae8a1296fc407dbd70c1d70fabb3b2817fa&amp;scene=21#wechat_redirect" target="_blank" rel="external">只需十四步：从零开始掌握Python机器学习（附资源）</a></p>
<p><a href="http://www.holehouse.org/mlclass/" target="_blank" rel="external">吴恩达的非官方笔记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待消化的内容&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/steven-yang/p/6348112.html&quot; title=&quot;机器学习中的基本数学知识 - SNYang - 博客园&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="Machine Learning" scheme="http://zhaoxj0217.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://zhaoxj0217.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
</feed>
